pipeline {
    agent any
    stages {
        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/test1webapp/aws.git']]])
            }
        }
        stage('Build') {
            steps {
                git branch: 'main', url: 'https://github.com/test1webapp/aws.git'
                sh "zip sg.zip test_copy_program.py"
            }
        }
        stage('Push'){
            steps{
                sh "/usr/local/bin/aws s3 cp sg.zip s3://testjenkins2021"
                }
            }
       stage('Deploy'){
           steps{
               sh "/usr/local/bin/aws lambda create-function --function-name sg --runtime python3.6 --code S3Bucket=testjenkins2021,S3Key=sg.zip --handler test_copy_program.lambda_handler --role arn:aws:iam::850752531886:role/lambda_fullaccess --region us-east-1"
               sh '/usr/local/bin/aws events put-rule --name test_1 --event-pattern "{\\\"source\\\":[\\\"aws.ec2\\\"],\\\"detail-type\\\":[\\\"AWS API Call via CloudTrail\\\"],\\\"detail\\\":{\\\"eventSource\\\":[\\\"ec2.amazonaws.com\\\"],\\\"eventName\\\":[\\\"AuthorizeSecurityGroupIngress\\\"]}}"'
               sh '/usr/local/bin/aws lambda add-permission --function-name sg --statement-id test --action "lambda:InvokeFunction" --principal events.amazonaws.com --source-arn arn:aws:events:us-east-1:850752531886:rule/test_1'
               sh '/usr/local/bin/aws events put-targets --rule test_1 --targets file://targets.json'

           }
       }
    }
}
